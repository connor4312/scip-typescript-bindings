/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: scip.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace scip {
    enum ProtocolVersion {
        UnspecifiedProtocolVersion = 0
    }
    enum TextEncoding {
        UnspecifiedTextEncoding = 0,
        UTF8 = 1,
        UTF16 = 2
    }
    enum PositionEncoding {
        UnspecifiedPositionEncoding = 0,
        UTF8CodeUnitOffsetFromLineStart = 1,
        UTF16CodeUnitOffsetFromLineStart = 2,
        UTF32CodeUnitOffsetFromLineStart = 3
    }
    enum SymbolRole {
        UnspecifiedSymbolRole = 0,
        Definition = 1,
        Import = 2,
        WriteAccess = 4,
        ReadAccess = 8,
        Generated = 16,
        Test = 32,
        ForwardDefinition = 64
    }
    enum SyntaxKind {
        UnspecifiedSyntaxKind = 0,
        Comment = 1,
        PunctuationDelimiter = 2,
        PunctuationBracket = 3,
        Keyword = 4,
        /** @deprecated*/
        IdentifierKeyword = 4,
        IdentifierOperator = 5,
        Identifier = 6,
        IdentifierBuiltin = 7,
        IdentifierNull = 8,
        IdentifierConstant = 9,
        IdentifierMutableGlobal = 10,
        IdentifierParameter = 11,
        IdentifierLocal = 12,
        IdentifierShadowed = 13,
        IdentifierNamespace = 14,
        /** @deprecated*/
        IdentifierModule = 14,
        IdentifierFunction = 15,
        IdentifierFunctionDefinition = 16,
        IdentifierMacro = 17,
        IdentifierMacroDefinition = 18,
        IdentifierType = 19,
        IdentifierBuiltinType = 20,
        IdentifierAttribute = 21,
        RegexEscape = 22,
        RegexRepeated = 23,
        RegexWildcard = 24,
        RegexDelimiter = 25,
        RegexJoin = 26,
        StringLiteral = 27,
        StringLiteralEscape = 28,
        StringLiteralSpecial = 29,
        StringLiteralKey = 30,
        CharacterLiteral = 31,
        NumericLiteral = 32,
        BooleanLiteral = 33,
        Tag = 34,
        TagAttribute = 35,
        TagDelimiter = 36
    }
    enum Severity {
        UnspecifiedSeverity = 0,
        Error = 1,
        Warning = 2,
        Information = 3,
        Hint = 4
    }
    enum DiagnosticTag {
        UnspecifiedDiagnosticTag = 0,
        Unnecessary = 1,
        Deprecated = 2
    }
    enum Language {
        UnspecifiedLanguage = 0,
        ABAP = 60,
        Apex = 96,
        APL = 49,
        Ada = 39,
        Agda = 45,
        AsciiDoc = 86,
        Assembly = 58,
        Awk = 66,
        Bat = 68,
        BibTeX = 81,
        C = 34,
        COBOL = 59,
        CPP = 35,
        CSS = 26,
        CSharp = 1,
        Clojure = 8,
        Coffeescript = 21,
        CommonLisp = 9,
        Coq = 47,
        CUDA = 97,
        Dart = 3,
        Delphi = 57,
        Diff = 88,
        Dockerfile = 80,
        Dyalog = 50,
        Elixir = 17,
        Erlang = 18,
        FSharp = 42,
        Fish = 65,
        Flow = 24,
        Fortran = 56,
        Git_Commit = 91,
        Git_Config = 89,
        Git_Rebase = 92,
        Go = 33,
        GraphQL = 98,
        Groovy = 7,
        HTML = 30,
        Hack = 20,
        Handlebars = 90,
        Haskell = 44,
        Idris = 46,
        Ini = 72,
        J = 51,
        JSON = 75,
        Java = 6,
        JavaScript = 22,
        JavaScriptReact = 93,
        Jsonnet = 76,
        Julia = 55,
        Justfile = 109,
        Kotlin = 4,
        LaTeX = 83,
        Lean = 48,
        Less = 27,
        Lua = 12,
        Luau = 108,
        Makefile = 79,
        Markdown = 84,
        Matlab = 52,
        Nickel = 110,
        Nix = 77,
        OCaml = 41,
        Objective_C = 36,
        Objective_CPP = 37,
        Pascal = 99,
        PHP = 19,
        PLSQL = 70,
        Perl = 13,
        PowerShell = 67,
        Prolog = 71,
        Protobuf = 100,
        Python = 15,
        R = 54,
        Racket = 11,
        Raku = 14,
        Razor = 62,
        Repro = 102,
        ReST = 85,
        Ruby = 16,
        Rust = 40,
        SAS = 61,
        SCSS = 29,
        SML = 43,
        SQL = 69,
        Sass = 28,
        Scala = 5,
        Scheme = 10,
        ShellScript = 64,
        Skylark = 78,
        Slang = 107,
        Solidity = 95,
        Svelte = 106,
        Swift = 2,
        Tcl = 101,
        TOML = 73,
        TeX = 82,
        Thrift = 103,
        TypeScript = 23,
        TypeScriptReact = 94,
        Verilog = 104,
        VHDL = 105,
        VisualBasic = 63,
        Vue = 25,
        Wolfram = 53,
        XML = 31,
        XSL = 32,
        YAML = 74,
        Zig = 38
    }
    class Index extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            metadata?: Metadata;
            documents?: Document[];
            external_symbols?: SymbolInformation[];
        });
        get metadata(): Metadata;
        set metadata(value: Metadata);
        get has_metadata(): boolean;
        get documents(): Document[];
        set documents(value: Document[]);
        get external_symbols(): SymbolInformation[];
        set external_symbols(value: SymbolInformation[]);
        static fromObject(data: {
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            documents?: ReturnType<typeof Document.prototype.toObject>[];
            external_symbols?: ReturnType<typeof SymbolInformation.prototype.toObject>[];
        }): Index;
        toObject(): {
            metadata?: {
                version?: ProtocolVersion | undefined;
                tool_info?: {
                    name?: string | undefined;
                    version?: string | undefined;
                    arguments?: string[] | undefined;
                } | undefined;
                project_root?: string | undefined;
                text_document_encoding?: TextEncoding | undefined;
            } | undefined;
            documents?: {
                language?: string | undefined;
                relative_path?: string | undefined;
                occurrences?: {
                    range?: number[] | undefined;
                    symbol?: string | undefined;
                    symbol_roles?: number | undefined;
                    override_documentation?: string[] | undefined;
                    syntax_kind?: SyntaxKind | undefined;
                    diagnostics?: {
                        severity?: Severity | undefined;
                        code?: string | undefined;
                        message?: string | undefined;
                        source?: string | undefined;
                        tags?: DiagnosticTag[] | undefined;
                    }[] | undefined;
                    enclosing_range?: number[] | undefined;
                }[] | undefined;
                symbols?: {
                    symbol?: string | undefined;
                    documentation?: string[] | undefined;
                    relationships?: {
                        symbol?: string | undefined;
                        is_reference?: boolean | undefined;
                        is_implementation?: boolean | undefined;
                        is_type_definition?: boolean | undefined;
                        is_definition?: boolean | undefined;
                    }[] | undefined;
                    kind?: SymbolInformation.Kind | undefined;
                    display_name?: string | undefined;
                    signature_documentation?: any | undefined;
                    enclosing_symbol?: string | undefined;
                }[] | undefined;
                text?: string | undefined;
                position_encoding?: PositionEncoding | undefined;
            }[] | undefined;
            external_symbols?: {
                symbol?: string | undefined;
                documentation?: string[] | undefined;
                relationships?: {
                    symbol?: string | undefined;
                    is_reference?: boolean | undefined;
                    is_implementation?: boolean | undefined;
                    is_type_definition?: boolean | undefined;
                    is_definition?: boolean | undefined;
                }[] | undefined;
                kind?: SymbolInformation.Kind | undefined;
                display_name?: string | undefined;
                signature_documentation?: any | undefined;
                enclosing_symbol?: string | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Index;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Index;
    }
    class Metadata extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            version?: ProtocolVersion;
            tool_info?: ToolInfo;
            project_root?: string;
            text_document_encoding?: TextEncoding;
        });
        get version(): ProtocolVersion;
        set version(value: ProtocolVersion);
        get tool_info(): ToolInfo;
        set tool_info(value: ToolInfo);
        get has_tool_info(): boolean;
        get project_root(): string;
        set project_root(value: string);
        get text_document_encoding(): TextEncoding;
        set text_document_encoding(value: TextEncoding);
        static fromObject(data: {
            version?: ProtocolVersion;
            tool_info?: ReturnType<typeof ToolInfo.prototype.toObject>;
            project_root?: string;
            text_document_encoding?: TextEncoding;
        }): Metadata;
        toObject(): {
            version?: ProtocolVersion | undefined;
            tool_info?: {
                name?: string | undefined;
                version?: string | undefined;
                arguments?: string[] | undefined;
            } | undefined;
            project_root?: string | undefined;
            text_document_encoding?: TextEncoding | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Metadata;
    }
    class ToolInfo extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            version?: string;
            arguments?: string[];
        });
        get name(): string;
        set name(value: string);
        get version(): string;
        set version(value: string);
        get arguments(): string[];
        set arguments(value: string[]);
        static fromObject(data: {
            name?: string;
            version?: string;
            arguments?: string[];
        }): ToolInfo;
        toObject(): {
            name?: string | undefined;
            version?: string | undefined;
            arguments?: string[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToolInfo;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ToolInfo;
    }
    class Document extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            language?: string;
            relative_path?: string;
            occurrences?: Occurrence[];
            symbols?: SymbolInformation[];
            text?: string;
            position_encoding?: PositionEncoding;
        });
        get language(): string;
        set language(value: string);
        get relative_path(): string;
        set relative_path(value: string);
        get occurrences(): Occurrence[];
        set occurrences(value: Occurrence[]);
        get symbols(): SymbolInformation[];
        set symbols(value: SymbolInformation[]);
        get text(): string;
        set text(value: string);
        get position_encoding(): PositionEncoding;
        set position_encoding(value: PositionEncoding);
        static fromObject(data: {
            language?: string;
            relative_path?: string;
            occurrences?: ReturnType<typeof Occurrence.prototype.toObject>[];
            symbols?: ReturnType<typeof SymbolInformation.prototype.toObject>[];
            text?: string;
            position_encoding?: PositionEncoding;
        }): Document;
        toObject(): {
            language?: string | undefined;
            relative_path?: string | undefined;
            occurrences?: {
                range?: number[] | undefined;
                symbol?: string | undefined;
                symbol_roles?: number | undefined;
                override_documentation?: string[] | undefined;
                syntax_kind?: SyntaxKind | undefined;
                diagnostics?: {
                    severity?: Severity | undefined;
                    code?: string | undefined;
                    message?: string | undefined;
                    source?: string | undefined;
                    tags?: DiagnosticTag[] | undefined;
                }[] | undefined;
                enclosing_range?: number[] | undefined;
            }[] | undefined;
            symbols?: {
                symbol?: string | undefined;
                documentation?: string[] | undefined;
                relationships?: {
                    symbol?: string | undefined;
                    is_reference?: boolean | undefined;
                    is_implementation?: boolean | undefined;
                    is_type_definition?: boolean | undefined;
                    is_definition?: boolean | undefined;
                }[] | undefined;
                kind?: SymbolInformation.Kind | undefined;
                display_name?: string | undefined;
                signature_documentation?: {
                    language?: string | undefined;
                    relative_path?: string | undefined;
                    occurrences?: {
                        range?: number[] | undefined;
                        symbol?: string | undefined;
                        symbol_roles?: number | undefined;
                        override_documentation?: string[] | undefined;
                        syntax_kind?: SyntaxKind | undefined;
                        diagnostics?: {
                            severity?: Severity | undefined;
                            code?: string | undefined;
                            message?: string | undefined;
                            source?: string | undefined;
                            tags?: DiagnosticTag[] | undefined;
                        }[] | undefined;
                        enclosing_range?: number[] | undefined;
                    }[] | undefined;
                    symbols?: any[] | undefined;
                    text?: string | undefined;
                    position_encoding?: PositionEncoding | undefined;
                } | undefined;
                enclosing_symbol?: string | undefined;
            }[] | undefined;
            text?: string | undefined;
            position_encoding?: PositionEncoding | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Document;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Document;
    }
    class Symbol extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            scheme?: string;
            package?: Package;
            descriptors?: Descriptor[];
        });
        get scheme(): string;
        set scheme(value: string);
        get package(): Package;
        set package(value: Package);
        get has_package(): boolean;
        get descriptors(): Descriptor[];
        set descriptors(value: Descriptor[]);
        static fromObject(data: {
            scheme?: string;
            package?: ReturnType<typeof Package.prototype.toObject>;
            descriptors?: ReturnType<typeof Descriptor.prototype.toObject>[];
        }): Symbol;
        toObject(): {
            scheme?: string | undefined;
            package?: {
                manager?: string | undefined;
                name?: string | undefined;
                version?: string | undefined;
            } | undefined;
            descriptors?: {
                name?: string | undefined;
                disambiguator?: string | undefined;
                suffix?: Descriptor.Suffix | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Symbol;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Symbol;
    }
    class Package extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            manager?: string;
            name?: string;
            version?: string;
        });
        get manager(): string;
        set manager(value: string);
        get name(): string;
        set name(value: string);
        get version(): string;
        set version(value: string);
        static fromObject(data: {
            manager?: string;
            name?: string;
            version?: string;
        }): Package;
        toObject(): {
            manager?: string | undefined;
            name?: string | undefined;
            version?: string | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Package;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Package;
    }
    class Descriptor extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            name?: string;
            disambiguator?: string;
            suffix?: Descriptor.Suffix;
        });
        get name(): string;
        set name(value: string);
        get disambiguator(): string;
        set disambiguator(value: string);
        get suffix(): Descriptor.Suffix;
        set suffix(value: Descriptor.Suffix);
        static fromObject(data: {
            name?: string;
            disambiguator?: string;
            suffix?: Descriptor.Suffix;
        }): Descriptor;
        toObject(): {
            name?: string | undefined;
            disambiguator?: string | undefined;
            suffix?: Descriptor.Suffix | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Descriptor;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Descriptor;
    }
    namespace Descriptor {
        enum Suffix {
            UnspecifiedSuffix = 0,
            Namespace = 1,
            /** @deprecated*/
            Package = 1,
            Type = 2,
            Term = 3,
            Method = 4,
            TypeParameter = 5,
            Parameter = 6,
            Meta = 7,
            Local = 8,
            Macro = 9
        }
    }
    class SymbolInformation extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            symbol?: string;
            documentation?: string[];
            relationships?: Relationship[];
            kind?: SymbolInformation.Kind;
            display_name?: string;
            signature_documentation?: Document;
            enclosing_symbol?: string;
        });
        get symbol(): string;
        set symbol(value: string);
        get documentation(): string[];
        set documentation(value: string[]);
        get relationships(): Relationship[];
        set relationships(value: Relationship[]);
        get kind(): SymbolInformation.Kind;
        set kind(value: SymbolInformation.Kind);
        get display_name(): string;
        set display_name(value: string);
        get signature_documentation(): Document;
        set signature_documentation(value: Document);
        get has_signature_documentation(): boolean;
        get enclosing_symbol(): string;
        set enclosing_symbol(value: string);
        static fromObject(data: {
            symbol?: string;
            documentation?: string[];
            relationships?: ReturnType<typeof Relationship.prototype.toObject>[];
            kind?: SymbolInformation.Kind;
            display_name?: string;
            signature_documentation?: ReturnType<typeof Document.prototype.toObject>;
            enclosing_symbol?: string;
        }): SymbolInformation;
        toObject(): {
            symbol?: string | undefined;
            documentation?: string[] | undefined;
            relationships?: {
                symbol?: string | undefined;
                is_reference?: boolean | undefined;
                is_implementation?: boolean | undefined;
                is_type_definition?: boolean | undefined;
                is_definition?: boolean | undefined;
            }[] | undefined;
            kind?: SymbolInformation.Kind | undefined;
            display_name?: string | undefined;
            signature_documentation?: {
                language?: string | undefined;
                relative_path?: string | undefined;
                occurrences?: {
                    range?: number[] | undefined;
                    symbol?: string | undefined;
                    symbol_roles?: number | undefined;
                    override_documentation?: string[] | undefined;
                    syntax_kind?: SyntaxKind | undefined;
                    diagnostics?: {
                        severity?: Severity | undefined;
                        code?: string | undefined;
                        message?: string | undefined;
                        source?: string | undefined;
                        tags?: DiagnosticTag[] | undefined;
                    }[] | undefined;
                    enclosing_range?: number[] | undefined;
                }[] | undefined;
                symbols?: {
                    symbol?: string | undefined;
                    documentation?: string[] | undefined;
                    relationships?: {
                        symbol?: string | undefined;
                        is_reference?: boolean | undefined;
                        is_implementation?: boolean | undefined;
                        is_type_definition?: boolean | undefined;
                        is_definition?: boolean | undefined;
                    }[] | undefined;
                    kind?: SymbolInformation.Kind | undefined;
                    display_name?: string | undefined;
                    signature_documentation?: any | undefined;
                    enclosing_symbol?: string | undefined;
                }[] | undefined;
                text?: string | undefined;
                position_encoding?: PositionEncoding | undefined;
            } | undefined;
            enclosing_symbol?: string | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SymbolInformation;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): SymbolInformation;
    }
    namespace SymbolInformation {
        enum Kind {
            UnspecifiedKind = 0,
            AbstractMethod = 66,
            Accessor = 72,
            Array = 1,
            Assertion = 2,
            AssociatedType = 3,
            Attribute = 4,
            Axiom = 5,
            Boolean = 6,
            Class = 7,
            Constant = 8,
            Constructor = 9,
            Contract = 62,
            DataFamily = 10,
            Delegate = 73,
            Enum = 11,
            EnumMember = 12,
            Error = 63,
            Event = 13,
            Fact = 14,
            Field = 15,
            File = 16,
            Function = 17,
            Getter = 18,
            Grammar = 19,
            Instance = 20,
            Interface = 21,
            Key = 22,
            Lang = 23,
            Lemma = 24,
            Library = 64,
            Macro = 25,
            Method = 26,
            MethodAlias = 74,
            MethodReceiver = 27,
            MethodSpecification = 67,
            Message = 28,
            Modifier = 65,
            Module = 29,
            Namespace = 30,
            Null = 31,
            Number = 32,
            Object = 33,
            Operator = 34,
            Package = 35,
            PackageObject = 36,
            Parameter = 37,
            ParameterLabel = 38,
            Pattern = 39,
            Predicate = 40,
            Property = 41,
            Protocol = 42,
            ProtocolMethod = 68,
            PureVirtualMethod = 69,
            Quasiquoter = 43,
            SelfParameter = 44,
            Setter = 45,
            Signature = 46,
            SingletonClass = 75,
            SingletonMethod = 76,
            StaticDataMember = 77,
            StaticEvent = 78,
            StaticField = 79,
            StaticMethod = 80,
            StaticProperty = 81,
            StaticVariable = 82,
            String = 48,
            Struct = 49,
            Subscript = 47,
            Tactic = 50,
            Theorem = 51,
            ThisParameter = 52,
            Trait = 53,
            TraitMethod = 70,
            Type = 54,
            TypeAlias = 55,
            TypeClass = 56,
            TypeClassMethod = 71,
            TypeFamily = 57,
            TypeParameter = 58,
            Union = 59,
            Value = 60,
            Variable = 61
        }
    }
    class Relationship extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            symbol?: string;
            is_reference?: boolean;
            is_implementation?: boolean;
            is_type_definition?: boolean;
            is_definition?: boolean;
        });
        get symbol(): string;
        set symbol(value: string);
        get is_reference(): boolean;
        set is_reference(value: boolean);
        get is_implementation(): boolean;
        set is_implementation(value: boolean);
        get is_type_definition(): boolean;
        set is_type_definition(value: boolean);
        get is_definition(): boolean;
        set is_definition(value: boolean);
        static fromObject(data: {
            symbol?: string;
            is_reference?: boolean;
            is_implementation?: boolean;
            is_type_definition?: boolean;
            is_definition?: boolean;
        }): Relationship;
        toObject(): {
            symbol?: string | undefined;
            is_reference?: boolean | undefined;
            is_implementation?: boolean | undefined;
            is_type_definition?: boolean | undefined;
            is_definition?: boolean | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Relationship;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Relationship;
    }
    class Occurrence extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            range?: number[];
            symbol?: string;
            symbol_roles?: number;
            override_documentation?: string[];
            syntax_kind?: SyntaxKind;
            diagnostics?: Diagnostic[];
            enclosing_range?: number[];
        });
        get range(): number[];
        set range(value: number[]);
        get symbol(): string;
        set symbol(value: string);
        get symbol_roles(): number;
        set symbol_roles(value: number);
        get override_documentation(): string[];
        set override_documentation(value: string[]);
        get syntax_kind(): SyntaxKind;
        set syntax_kind(value: SyntaxKind);
        get diagnostics(): Diagnostic[];
        set diagnostics(value: Diagnostic[]);
        get enclosing_range(): number[];
        set enclosing_range(value: number[]);
        static fromObject(data: {
            range?: number[];
            symbol?: string;
            symbol_roles?: number;
            override_documentation?: string[];
            syntax_kind?: SyntaxKind;
            diagnostics?: ReturnType<typeof Diagnostic.prototype.toObject>[];
            enclosing_range?: number[];
        }): Occurrence;
        toObject(): {
            range?: number[] | undefined;
            symbol?: string | undefined;
            symbol_roles?: number | undefined;
            override_documentation?: string[] | undefined;
            syntax_kind?: SyntaxKind | undefined;
            diagnostics?: {
                severity?: Severity | undefined;
                code?: string | undefined;
                message?: string | undefined;
                source?: string | undefined;
                tags?: DiagnosticTag[] | undefined;
            }[] | undefined;
            enclosing_range?: number[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Occurrence;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Occurrence;
    }
    class Diagnostic extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            severity?: Severity;
            code?: string;
            message?: string;
            source?: string;
            tags?: DiagnosticTag[];
        });
        get severity(): Severity;
        set severity(value: Severity);
        get code(): string;
        set code(value: string);
        get message(): string;
        set message(value: string);
        get source(): string;
        set source(value: string);
        get tags(): DiagnosticTag[];
        set tags(value: DiagnosticTag[]);
        static fromObject(data: {
            severity?: Severity;
            code?: string;
            message?: string;
            source?: string;
            tags?: DiagnosticTag[];
        }): Diagnostic;
        toObject(): {
            severity?: Severity | undefined;
            code?: string | undefined;
            message?: string | undefined;
            source?: string | undefined;
            tags?: DiagnosticTag[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Diagnostic;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Diagnostic;
    }
}
